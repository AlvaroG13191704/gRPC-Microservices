// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: benchmark.proto

package benchmarkProto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BenchmarkClient is the client API for Benchmark service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BenchmarkClient interface {
	// Tipo stream para que el cliente pueda enviar multiples mensajes
	Benchmark(ctx context.Context, in *BenchmarkRequest, opts ...grpc.CallOption) (*BenchmarkResponse, error)
}

type benchmarkClient struct {
	cc grpc.ClientConnInterface
}

func NewBenchmarkClient(cc grpc.ClientConnInterface) BenchmarkClient {
	return &benchmarkClient{cc}
}

func (c *benchmarkClient) Benchmark(ctx context.Context, in *BenchmarkRequest, opts ...grpc.CallOption) (*BenchmarkResponse, error) {
	out := new(BenchmarkResponse)
	err := c.cc.Invoke(ctx, "/Benchmark/Benchmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BenchmarkServer is the server API for Benchmark service.
// All implementations must embed UnimplementedBenchmarkServer
// for forward compatibility
type BenchmarkServer interface {
	// Tipo stream para que el cliente pueda enviar multiples mensajes
	Benchmark(context.Context, *BenchmarkRequest) (*BenchmarkResponse, error)
	mustEmbedUnimplementedBenchmarkServer()
}

// UnimplementedBenchmarkServer must be embedded to have forward compatible implementations.
type UnimplementedBenchmarkServer struct {
}

func (UnimplementedBenchmarkServer) Benchmark(context.Context, *BenchmarkRequest) (*BenchmarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Benchmark not implemented")
}
func (UnimplementedBenchmarkServer) mustEmbedUnimplementedBenchmarkServer() {}

// UnsafeBenchmarkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BenchmarkServer will
// result in compilation errors.
type UnsafeBenchmarkServer interface {
	mustEmbedUnimplementedBenchmarkServer()
}

func RegisterBenchmarkServer(s grpc.ServiceRegistrar, srv BenchmarkServer) {
	s.RegisterService(&Benchmark_ServiceDesc, srv)
}

func _Benchmark_Benchmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BenchmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkServer).Benchmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Benchmark/Benchmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkServer).Benchmark(ctx, req.(*BenchmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Benchmark_ServiceDesc is the grpc.ServiceDesc for Benchmark service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Benchmark_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Benchmark",
	HandlerType: (*BenchmarkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Benchmark",
			Handler:    _Benchmark_Benchmark_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "benchmark.proto",
}
