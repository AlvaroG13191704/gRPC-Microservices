package main

import (
	confproto "conferencia/goClient/proto"
	"context"
	"log"

	"github.com/gofiber/fiber/v2"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
)

func main() {
	app := fiber.New()

	app.Get("/", func(c *fiber.Ctx) error {
		return c.SendString("Hello, World!")
	})

	// get method with the id parameter
	app.Get("/get-appointments", func(c *fiber.Ctx) error {

		id := c.Query("id")

		// use the code generated by the protobuf to get the appointments from the server
		getAppointmentsgRPCBasic(id)

		return c.SendString("Doctor ID: " + c.Query("id"))
	})

	app.Listen(":3000")
}

// get appointments using gRPC the basic form
func getAppointmentsgRPCBasic(id string) {
	conn, err := grpc.Dial("localhost:3001", grpc.WithTransportCredentials(insecure.NewCredentials()),
		grpc.WithBlock())
	if err != nil {
		log.Fatalln(err)
	}

	cl := confproto.NewAppointmentsServiceClient(conn)
	defer func(conn *grpc.ClientConn) {
		err := conn.Close()
		if err != nil {
			log.Fatalln(err)
		}

	}(conn)

	// get the appointments
	response, err := cl.GetAppointments(context.Background(), &confproto.GetAppointmentsRequest{
		DoctorId: id,
	})

	if err != nil {
		log.Fatalln(err)
	}

	log.Println("appointments -> ", response.Appointments)

}
